import java.awt.*;
import java.awt.event.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.*;
import java.io.File;
import javax.imageio.ImageIO;
import java.io.IOException;
public class Main extends JFrame {
private Calendar currentTime;
private JPanel clockPanel;
private Color frameColor = Color.BLACK;
private Calendar alarmTime = null;
private boolean alarmRinging = false;
private Image backgroundImage;
public Main() {
setTitle("Enhanced Digital Clock");
setSize(600, 600);
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
setResizable(false);
currentTime = Calendar.getInstance();
clockPanel = new ClockPanel();
clockPanel.setBackground(frameColor);
JPanel featurePanel = new JPanel();
featurePanel.setLayout(new GridLayout(1, 3));
JButton setTimeButton = new JButton("Set Time");
setTimeButton.addActionListener(e -> setTime());
JButton setAlarmButton = new JButton("Set Alarm");
setAlarmButton.addActionListener(e -> setAlarm());
JButton changeColorButton = new JButton("Change Frame Color");
changeColorButton.addActionListener(e -> changeFrameColor());
featurePanel.add(setTimeButton);
featurePanel.add(setAlarmButton);
featurePanel.add(changeColorButton);
setLayout(new BorderLayout());
add(clockPanel, BorderLayout.CENTER);
add(featurePanel, BorderLayout.SOUTH);
loadBackgroundImage();
Timer timer = new Timer(1000, e -> {
updateClock();
checkAlarm();
});
timer.start();
}
private void loadBackgroundImage() {
try {
backgroundImage = ImageIO.read(new File("background.jpg"));
} catch (IOException e) {
System.out.println("Error loading background image.");
}
}
private class ClockPanel extends JPanel {
@Override
protected void paintComponent(Graphics g) {
super.paintComponent(g);
if (backgroundImage != null) {
g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
}
int hours = currentTime.get(Calendar.HOUR);
int minutes = currentTime.get(Calendar.MINUTE);
int seconds = currentTime.get(Calendar.SECOND);
String amPm = currentTime.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";
int centerX = getWidth() / 2;
int centerY = getHeight() / 2;
int radius = Math.min(center X, center Y) - 40;
g.setColor(Color.WHITE);
g.drawOval(centerX - radius, centerY - radius, 2 * radius, 2 * radius);
g.setFont(new Font("Arial", Font.BOLD, 16));
for (int i = 1; i <= 12; i++) {
double angle = Math.toRadians(i * 30 - 90);
int x = (int) (centerX + radius * 0.85 * Math.cos(angle));
int y = (int) (centerY + radius * 0.85 * Math.sin(angle));
String number = Integer.toString(i);
int stringWidth = g.getFontMetrics().stringWidth(number);
int stringHeight = g.getFontMetrics().getHeight();
g.drawString(number, x - stringWidth / 2, y + stringHeight / 4);
}
drawHand(g, centerX, centerY, radius * 0.6, hours * 30 + minutes / 2, Color.WHITE);
drawHand(g, centerX, centerY, radius * 0.8, minutes * 6, Color.WHITE) ;
drawHand(g, centerX, centerY, radius * 0.9, seconds * 6, Color.RED);
g.setFont(new Font("Arial", Font.BOLD, 24));
String digitalTime = new SimpleDateFormat("hh:mm:ss a").format(currentTime.getTime());
int stringWidth = g.getFontMetrics().stringWidth(digitalTime);
g.setColor(Color.YELLOW);
g.drawString(digitalTime, centerX - stringWidth / 2, centerY);
}
private void drawHand(Graphics g, int x, int y, double length, double angleDegrees, Color color) {
g.setColor(color);
double angle = Math.toRadians(angleDegrees - 90);
int xEnd = x + (int) (length * Math.cos(angle));
int yEnd = y + (int) (length * Math.sin(angle));
g.drawLine(x, y, xEnd, yEnd);
}
}
private void updateClock() {
currentTime.add(Calendar.SECOND, 1);
clockPanel.repaint();
}
private void setTime() {
String time = JOptionPane.showInputDialog(this, "Enter current time (HH:mm:ss):");
try {
SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
java.util.Date date = sdf.parse(time);
currentTime.setTime(date);
JOptionPane.showMessageDialog(this, "Time set to: " + time);
} catch (Exception e) {
JOptionPane.showMessageDialog(this, "Invalid time format!");
}
}
private void setAlarm() {
String time = JOptionPane.showInputDialog(this, "Enter alarm time (HH:mm):");
try {
SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
Calendar calendar = Calendar.getInstance();
calendar.setTime(sdf.parse(time));
alarmTime = calendar;
JOptionPane.showMessageDialog(this, "Alarm set for: " + time);
} catch (Exception e) {
JOptionPane.showMessageDialog(this, "Invalid time format!");
}
}
private void changeFrameColor() {
Color newColor = JColorChooser.showDialog(this, "Choose Frame Color", frameColor);
if (newColor != null) {
frameColor = newColor;
clockPanel.setBackground(frameColor);
}
}
private void checkAlarm() {
if (alarmTime != null) {
Calendar current = Calendar.getInstance();
if(current.get(Calendar.HOUR_OF_DAY) == alarmTime.get(Calendar.HOUR_OF_DAY)
&&current.get(Calndar.MINUTE) == alarmTime.get(Calendar.MINUTE)
&& !alarmRinging) {
alarmRinging = true;
showAlarmMessage();
}
}
}
private void showAlarmMessage() {
int option = JOptionPane.showOptionDialog(this, "ALARM IS RINGING! Time to wake up!", "Alarm",
JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null,
new String[]{"Stop", "Snooze (5 mins)"}, "Stop");
if (option == 0) {
alarmRinging = false;
} else if (option == 1) {
alarmTime.add(Calendar.MINUTE, 5);
alarmRinging = false;
}
}
public static void main(String[] args) {
SwingUtilities.invokeLater(() -> {
Main clock = new Main();
clock.setVisible(true);
});
}}